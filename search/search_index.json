{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"<p>Redirecting to documentation...</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>leaguewizard<ul> <li>api<ul> <li>callback_handler</li> <li>core</li> <li>models</li> <li>utils</li> </ul> </li> <li>config</li> <li>core<ul> <li>constants</li> <li>exceptions</li> <li>models</li> </ul> </li> <li>data<ul> <li>certs</li> <li>images</li> </ul> </li> <li>mobalytics<ul> <li>mobalytics</li> <li>parsers</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/leaguewizard/","title":"leaguewizard","text":"<p>LeagueWizard main entry point.</p>"},{"location":"reference/leaguewizard/#leaguewizard.main","title":"<code>main()</code>","text":"<p>Main entry point function for LeagueWizard.</p> Source code in <code>src\\leaguewizard\\__init__.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"Main entry point function for LeagueWizard.\"\"\"\n    LOG_DIR.mkdir(exist_ok=True, parents=True)\n    logger.add(\n        LOG_DIR / f\"{datetime.now(timezone.utc).strftime('%Y-%m-%d_%H-%M-%S')}.log\",\n    )\n    s = socket.socket()\n    try:\n        s.bind((\"127.0.0.1\", 13463))\n    except OSError as e:\n        raise LeWizardGenericError(\n            message=\"Another instance is already running\",\n            show=True,\n            title=\"Error!\",\n            terminate=True,\n        ) from e\n\n    asyncio.run(start())\n</code></pre>"},{"location":"reference/leaguewizard/api/","title":"api","text":"<p>Generic init.py.</p>"},{"location":"reference/leaguewizard/api/callback_handler/","title":"callback_handler","text":"<p>Handles WebSocket messages from the League of Legends client to update game data.</p> <p>This module provides functions to process real-time game events, fetch champion-specific information from external sources like Mobalytics, and then send updated item sets, rune pages, and summoner spells back to the League of Legends client.</p>"},{"location":"reference/leaguewizard/api/callback_handler/#leaguewizard.api.callback_handler.get_champion_name","title":"<code>get_champion_name(client, champion_id)</code>  <code>async</code>","text":"<p>Retrieves the name of a champion given their ID.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>ClientSession</code> <p>The aiohttp client session.</p> required <code>champion_id</code> <code>int</code> <p>The ID of the champion.</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>str | None: The champion's name if found, otherwise None.</p> Source code in <code>src\\leaguewizard\\api\\callback_handler.py</code> <pre><code>async def get_champion_name(\n    client: aiohttp.ClientSession,\n    champion_id: int,\n) -&gt; str | None:\n    \"\"\"Retrieves the name of a champion given their ID.\n\n    Args:\n        client (aiohttp.ClientSession): The aiohttp client session.\n        champion_id (int): The ID of the champion.\n\n    Returns:\n        str | None: The champion's name if found, otherwise None.\n    \"\"\"\n    champions = await _get_champion_dict(client)\n    champion_name = champions[champion_id]\n    return champion_name or None\n</code></pre>"},{"location":"reference/leaguewizard/api/callback_handler/#leaguewizard.api.callback_handler.handle_auto_accept","title":"<code>handle_auto_accept(conn)</code>  <code>async</code>","text":"<p>Handles the automatic acceptance of game phases.</p> Source code in <code>src\\leaguewizard\\api\\callback_handler.py</code> <pre><code>async def handle_auto_accept(conn: Any) -&gt; None:\n    \"\"\"Handles the automatic acceptance of game phases.\"\"\"\n    while True:\n        context = ssl_context()\n\n        response = await conn.get(\"/lol-gameflow/v1/session\", ssl=context)\n        content = await response.json()\n\n        phase = content.get(\"phase\")\n\n        match phase:\n            case \"ChampSelect\":\n                break\n\n            case \"ReadyCheck\":\n                await conn.post(\n                    \"/lol-matchmaking/v1/ready-check/accept\",\n                    ssl=context,\n                )\n                break\n\n        await asyncio.sleep(1)\n</code></pre>"},{"location":"reference/leaguewizard/api/callback_handler/#leaguewizard.api.callback_handler.on_message","title":"<code>on_message(event, conn, aio_client_id)</code>  <code>async</code>","text":"<p>Handles incoming messages from a connection.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str | bytes</code> <p>The incoming message event.</p> required <code>conn</code> <code>ClientSession</code> <p>The aiohttp client session for the connection.</p> required <code>aio_client_id</code> <code>int</code> <p>Random int to ensure there is only one aiohttp ClientSession being used.</p> required Source code in <code>src\\leaguewizard\\api\\callback_handler.py</code> <pre><code>async def on_message(\n    event: str | bytes,\n    conn: aiohttp.ClientSession,\n    aio_client_id: int,\n) -&gt; None:\n    \"\"\"Handles incoming messages from a connection.\n\n    Args:\n        event: The incoming message event.\n        conn: The aiohttp client session for the connection.\n        aio_client_id: Random int to ensure there is only one\n            aiohttp ClientSession being used.\n    \"\"\"\n    logger.debug(f\"aio_client_id: {aio_client_id}\")\n    try:\n        if config.auto_accept is True:\n            await handle_auto_accept(conn)\n\n        data = json.loads(event)[2][\"data\"]\n\n        summoner = next(\n            (\n                player\n                for player in data.get(\"myTeam\")\n                if player.get(\"cellId\") == data.get(\"localPlayerCellId\")\n            ),\n            None,\n        )\n        summoner_data = SummonerData.model_validate(summoner, by_alias=True)\n\n        champion_id = max(\n            summoner_data.champion_id,\n            summoner_data.champion_pick_intent,\n        )\n\n        if champion_id == champion_tracker.last_id():\n            return\n        logger.debug(\n            f\"Last champion: {champion_tracker.last_id()} | Current: {champion_id}.\",\n        )\n        champion_list = await _get_champion_dict(conn)\n        logger.debug(\"Fetched champion_list.\")\n\n        champion_name = champion_list.get(champion_id)\n        logger.debug(f\"Champion name: {champion_name}\")\n\n        role = (\n            ROLES.get(summoner_data.assigned_position)\n            if summoner_data.assigned_position is not None\n            else \"aram\"\n        )\n\n        itemsets_payload, perks_payload, spells_payload = await get_mobalytics_info(\n            champion_name,\n            role,\n            conn,\n            champion_id,\n            summoner_data.summoner_id,\n        )\n\n        await asyncio.gather(\n            send_itemsets(\n                conn,\n                itemsets_payload,\n                summoner_data.summoner_id,\n                context=ssl_context(),\n            ),\n            send_perks(conn, perks_payload, context=ssl_context()),\n            send_spells(conn, spells_payload, context=ssl_context()),\n        )\n        champion_tracker.last_id(champion_id)\n\n    except (\n        KeyError,\n        TypeError,\n        IndexError,\n        json.decoder.JSONDecodeError,\n        ValueError,\n    ) as e:\n        logger.debug(e)\n\n    except (KeyboardInterrupt, asyncio.exceptions.CancelledError) as e:\n        logger.exception(e)\n        sys.exit(0)\n</code></pre>"},{"location":"reference/leaguewizard/api/callback_handler/#leaguewizard.api.callback_handler.send_itemsets","title":"<code>send_itemsets(client, payload, account_id, context)</code>  <code>async</code>","text":"<p>Sends item set data for a given account ID.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>ClientSession</code> <p>An aiohttp client session for making HTTP requests.</p> required <code>payload</code> <code>PayloadItemSets</code> <p>The PayloadItemSets object containing the item set data.</p> required <code>account_id</code> <code>int</code> <p>The unique identifier for the League of Legends account.</p> required <code>context</code> <code>SSLContext</code> <p>An SSLContext object for secure HTTP connections.</p> required Source code in <code>src\\leaguewizard\\api\\callback_handler.py</code> <pre><code>async def send_itemsets(\n    client: aiohttp.ClientSession,\n    payload: PayloadItemSets,\n    account_id: int,\n    context: SSLContext,\n) -&gt; None:\n    \"\"\"Sends item set data for a given account ID.\n\n    Args:\n        client: An aiohttp client session for making HTTP requests.\n        payload: The PayloadItemSets object containing the item set data.\n        account_id: The unique identifier for the League of Legends account.\n        context: An SSLContext object for secure HTTP connections.\n    \"\"\"\n    await client.put(\n        url=f\"/lol-item-sets/v1/item-sets/{account_id}/sets\",\n        json=payload.asjson(),\n        ssl=context,\n    )\n    logger.debug(\"Successfully imported itemsets.\")\n</code></pre>"},{"location":"reference/leaguewizard/api/callback_handler/#leaguewizard.api.callback_handler.send_perks","title":"<code>send_perks(client, payload, context)</code>  <code>async</code>","text":"<p>Deletes the current rune page and creates a new one.</p> <p>Deletes the current rune page if it exists and then creates a new rune page based on the provided payload.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>ClientSession</code> <p>An aiohttp.ClientSession for making HTTP requests.</p> required <code>payload</code> <code>PayloadPerks</code> <p>A PayloadPerks object containing the data for the new rune page.</p> required <code>context</code> <code>SSLContext</code> <p>An SSLContext for establishing secure connections.</p> required Source code in <code>src\\leaguewizard\\api\\callback_handler.py</code> <pre><code>async def send_perks(\n    client: aiohttp.ClientSession,\n    payload: PayloadPerks,\n    context: SSLContext,\n) -&gt; None:\n    \"\"\"Deletes the current rune page and creates a new one.\n\n    Deletes the current rune page if it exists and then creates a new rune\n    page based on the provided payload.\n\n    Args:\n        client: An aiohttp.ClientSession for making HTTP requests.\n        payload: A PayloadPerks object containing the data for the new rune page.\n        context: An SSLContext for establishing secure connections.\n    \"\"\"\n    with contextlib.suppress(KeyError):\n        response = await client.get(\n            url=\"/lol-perks/v1/currentpage\",\n            ssl=context,\n        )\n        content = await response.json()\n        page_id = content[\"id\"]\n        if page_id:\n            await client.delete(\n                url=f\"/lol-perks/v1/pages/{page_id}\",\n                ssl=context,\n            )\n\n    await client.post(\n        url=\"/lol-perks/v1/pages\",\n        json=payload.asjson(),\n        ssl=context,\n    )\n    logger.debug(\"Successfully imported perks.\")\n</code></pre>"},{"location":"reference/leaguewizard/api/callback_handler/#leaguewizard.api.callback_handler.send_spells","title":"<code>send_spells(client, payload, context)</code>  <code>async</code>","text":"<p>Sends a spell to the League of Legends client.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>ClientSession</code> <p>An aiohttp client session.</p> required <code>payload</code> <code>PayloadSpells</code> <p>The payload containing spell information.</p> required <code>context</code> <code>SSLContext</code> <p>The SSL context for the client.</p> required Source code in <code>src\\leaguewizard\\api\\callback_handler.py</code> <pre><code>async def send_spells(\n    client: aiohttp.ClientSession,\n    payload: PayloadSpells,\n    context: SSLContext,\n) -&gt; None:\n    \"\"\"Sends a spell to the League of Legends client.\n\n    Args:\n        client: An aiohttp client session.\n        payload: The payload containing spell information.\n        context: The SSL context for the client.\n    \"\"\"\n    await client.patch(\n        url=\"/lol-champ-select/v1/session/my-selection\",\n        json=payload.asjson(),\n        ssl=context,\n    )\n    logger.debug(\"Successfully imported spells.\")\n</code></pre>"},{"location":"reference/leaguewizard/api/core/","title":"core","text":"<p>Core module for LeagueWizard, handling LCU connection and event processing.</p> <p>This module establishes a connection to the League of Legends client (LCU) via WebSocket, retrieves necessary authentication details, and dispatches incoming game events to the <code>on_message</code> handler. It also manages the system tray icon.</p>"},{"location":"reference/leaguewizard/api/core/#leaguewizard.api.core.find_client_full_path","title":"<code>find_client_full_path(exe='LeagueClient.exe')</code>","text":"<p>Finds the full path of the specified executable.</p> Source code in <code>src\\leaguewizard\\api\\core.py</code> <pre><code>def find_client_full_path(exe: str = \"LeagueClient.exe\") -&gt; Path:\n    \"\"\"Finds the full path of the specified executable.\"\"\"\n    proc_path: Any = next(\n        (i.exe() for i in psutil.process_iter() if i.name() == exe),\n        None,\n    )\n    if proc_path is None:\n        raise LeWizardGenericError(\n            message=f\"{exe} not found. Is client running?\",\n            show=True,\n            title=\"Error.\",\n            terminate=True,\n        )\n    return Path(proc_path)\n</code></pre>"},{"location":"reference/leaguewizard/api/core/#leaguewizard.api.core.start","title":"<code>start()</code>  <code>async</code>","text":"<p>Initializes the application and starts listening for events.</p> <p>This function sets up a system tray icon and establishes a connection to the League Client. It retrieves the client path and lockfile, then connects to the websocket to listen for events. The function handles incoming events and processes them using the <code>on_message</code> function. It also manages exceptions related to websocket connections and application termination.</p> Source code in <code>src\\leaguewizard\\api\\core.py</code> <pre><code>async def start() -&gt; None:\n    \"\"\"Initializes the application and starts listening for events.\n\n    This function sets up a system tray icon and establishes a connection to the League\n    Client. It retrieves the client path and lockfile, then connects to the websocket to\n    listen for events. The function handles incoming events and processes them using the\n    `on_message` function. It also manages exceptions related to websocket connections and\n    application termination.\n    \"\"\"\n    with SysTrayIcon(\n        str(image_path),\n        \"LeagueWizard\",\n        on_quit=lambda e: os._exit(0),\n    ) as tray:\n        logger.debug(\"Tray initialized\")\n        try:\n            league_client = find_client_full_path()\n            logger.debug(f\"Client found: {league_client}\")\n            lockfile = LockFile(league_client)\n            logger.debug(f\"Lockfile found: {lockfile.lockfile_path}\")\n            context = ssl_context()\n            assert lockfile.wss_addr is not None  # noqa: S101\n            async with websockets.connect(\n                uri=lockfile.wss_addr,\n                additional_headers=lockfile.auth_header,\n                ssl=context,\n            ) as ws:\n                logger.debug(\"Joining websocket session.\")\n\n                await ws.send('[5, \"OnJsonApiEvent_lol-champ-select_v1_session\"]')\n                logger.debug(\n                    \"Subscribed to OnJsonApiEvent_lol-champ-select_v1_session.\",\n                )\n                aio_client = aiohttp.ClientSession(\n                    base_url=lockfile.https_addr,\n                    headers=lockfile.auth_header,\n                )\n                aio_client_id = random.randint(0, 1000)  # noqa: S311\n                async for event in ws:\n                    logger.debug(\"Event received.\")\n                    min_event_length = 3\n                    if event is not None and len(event) &gt;= min_event_length:\n                        await on_message(\n                            event,\n                            aio_client,\n                            aio_client_id,\n                        )\n\n        except websockets.exceptions.ConnectionClosedError as e:\n            logger.exception(e.args)\n\n        except (KeyboardInterrupt, asyncio.exceptions.CancelledError) as e:\n            logger.exception(e.args)\n            raise LeWizardGenericError(show=False, terminate=True) from e\n\n        finally:\n            tray.shutdown()\n            sys.exit(0)\n</code></pre>"},{"location":"reference/leaguewizard/api/models/","title":"models","text":"<p>Manages the League of Legends lockfile.</p> <p>This module provides the <code>LockFile</code> class to parse the League of Legends lockfile and extract necessary connection details for interacting with the client's API.</p> <p>Classes:</p> Name Description <code>LockFile</code> <p>Manages parsing the lockfile for API connection details.</p>"},{"location":"reference/leaguewizard/api/models/#leaguewizard.api.models.LockFile","title":"<code>LockFile</code>","text":"<p>Class to manage League of Legends lockfile.</p> <p>Handles parsing the lockfile to extract connection details for the League client API.</p> <p>Attributes:</p> Name Type Description <code>exe</code> <code>str</code> <p>Path to the League of Legends executable.</p> <code>https_addr</code> <code>str | None</code> <p>The HTTPS address for the League client API.</p> <code>wss_addr</code> <code>str | None</code> <p>The WSS address for the League client API.</p> <code>auth_header</code> <code>dict[str, str] | None</code> <p>The Authorization header for API requests.</p> Source code in <code>src\\leaguewizard\\api\\models.py</code> <pre><code>class LockFile:\n    \"\"\"Class to manage League of Legends lockfile.\n\n    Handles parsing the lockfile to extract connection details for the\n    League client API.\n\n    Attributes:\n        exe (str): Path to the League of Legends executable.\n        https_addr (str | None): The HTTPS address for the League client API.\n        wss_addr (str | None): The WSS address for the League client API.\n        auth_header (dict[str, str] | None): The Authorization header for API\n            requests.\n    \"\"\"\n\n    def __init__(self, league_exe: str | Path) -&gt; None:\n        \"\"\"Initializes the LeagueClient.\n\n        Args:\n            league_exe: Path to the League of Legends executable.\n        \"\"\"\n        self.exe: str | Path = league_exe\n\n        self.lockfile_path: Path = self._lockfile(self.exe)\n\n        self._https_addr: str | None = None\n        self._wss_addr: str | None = None\n        self._auth_header: dict[str, str] | None = None\n        self._port: str | None = None\n        self._password: str | None = None\n\n        self._parse()\n\n    def _parse(self) -&gt; None:\n        \"\"\"Parse the lockfile and set connection parameters.\"\"\"\n        with self.lockfile_path.open(encoding=\"utf-8\") as f:\n            parts: list[str] = f.read().split(\":\")\n\n        self._port = parts[2]\n        self._password = parts[3]\n\n        full_addr: str = f\"127.0.0.1:{self._port}\"\n\n        full_password: str | None = (\n            \"riot:\" + self._password if self._password is not None else None\n        )\n        auth_string: str = base64.b64encode(\n            bytes(str(full_password), \"utf-8\"),\n        ).decode()\n\n        self._https_addr = f\"https://{full_addr}\"\n        self._wss_addr = f\"wss://{full_addr}\"\n        self._auth_header = {\"Authorization\": f\"Basic {auth_string}\"}\n\n    @property\n    def https_addr(self) -&gt; str | None:\n        \"\"\"Gets the HTTPS address.\"\"\"\n        return self._https_addr\n\n    @property\n    def wss_addr(self) -&gt; str | None:\n        \"\"\"Gets the WebSocket server address.\n\n        Returns:\n            The WebSocket server address string, or None if not set.\n        \"\"\"\n        return self._wss_addr\n\n    @property\n    def auth_header(self) -&gt; dict[str, str] | None:\n        \"\"\"Returns the authentication header as a dictionary or None.\"\"\"\n        return self._auth_header\n\n    @staticmethod\n    def _lockfile(exe: str | Path) -&gt; Path:\n        \"\"\"Generate the path for the lockfile based on the executable path.\"\"\"\n        return Path(exe).parent / \"lockfile\"\n</code></pre>"},{"location":"reference/leaguewizard/api/models/#leaguewizard.api.models.LockFile.auth_header","title":"<code>auth_header</code>  <code>property</code>","text":"<p>Returns the authentication header as a dictionary or None.</p>"},{"location":"reference/leaguewizard/api/models/#leaguewizard.api.models.LockFile.https_addr","title":"<code>https_addr</code>  <code>property</code>","text":"<p>Gets the HTTPS address.</p>"},{"location":"reference/leaguewizard/api/models/#leaguewizard.api.models.LockFile.wss_addr","title":"<code>wss_addr</code>  <code>property</code>","text":"<p>Gets the WebSocket server address.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>The WebSocket server address string, or None if not set.</p>"},{"location":"reference/leaguewizard/api/models/#leaguewizard.api.models.LockFile.__init__","title":"<code>__init__(league_exe)</code>","text":"<p>Initializes the LeagueClient.</p> <p>Parameters:</p> Name Type Description Default <code>league_exe</code> <code>str | Path</code> <p>Path to the League of Legends executable.</p> required Source code in <code>src\\leaguewizard\\api\\models.py</code> <pre><code>def __init__(self, league_exe: str | Path) -&gt; None:\n    \"\"\"Initializes the LeagueClient.\n\n    Args:\n        league_exe: Path to the League of Legends executable.\n    \"\"\"\n    self.exe: str | Path = league_exe\n\n    self.lockfile_path: Path = self._lockfile(self.exe)\n\n    self._https_addr: str | None = None\n    self._wss_addr: str | None = None\n    self._auth_header: dict[str, str] | None = None\n    self._port: str | None = None\n    self._password: str | None = None\n\n    self._parse()\n</code></pre>"},{"location":"reference/leaguewizard/api/models/#leaguewizard.api.models.SummonerData","title":"<code>SummonerData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Data class for summoner information.</p> <p>Attributes:</p> Name Type Description <code>account_id</code> <code>str</code> <p>The unique account ID of the summoner.</p> <code>id</code> <code>str</code> <p>The unique summoner ID.</p> <code>name</code> <code>str</code> <p>The summoner's name.</p> <code>profile_icon_id</code> <code>int</code> <p>The ID of the summoner's profile icon.</p> <code>puuid</code> <code>str</code> <p>The platform-unique ID of the summoner.</p> <code>revision_date</code> <code>int</code> <p>The last modified date of the summoner's account.</p> <code>summoner_level</code> <code>int</code> <p>The summoner's level.</p> Source code in <code>src\\leaguewizard\\api\\models.py</code> <pre><code>class SummonerData(BaseModel):\n    \"\"\"Data class for summoner information.\n\n    Attributes:\n        account_id (str): The unique account ID of the summoner.\n        id (str): The unique summoner ID.\n        name (str): The summoner's name.\n        profile_icon_id (int): The ID of the summoner's profile icon.\n        puuid (str): The platform-unique ID of the summoner.\n        revision_date (int): The last modified date of the summoner's\n            account.\n        summoner_level (int): The summoner's level.\n    \"\"\"\n\n    assigned_position: str = Field(alias=\"assignedPosition\")\n    cell_id: int = Field(alias=\"cellId\")\n    champion_id: int = Field(alias=\"championId\")\n    champion_pick_intent: int = Field(alias=\"championPickIntent\")\n    selected_skin_id: int = Field(alias=\"selectedSkinId\")\n    ward_skin_id: int = Field(alias=\"wardSkinId\")\n    summoner_id: int = Field(alias=\"summonerId\")\n</code></pre>"},{"location":"reference/leaguewizard/api/utils/","title":"utils","text":"<p>Provides utilities for SSL context management.</p> <p>This module contains functions for creating and configuring SSL contexts, primarily for client connections, to interact with secure services. It leverages the standard <code>ssl</code> library and custom certificate paths.</p>"},{"location":"reference/leaguewizard/api/utils/#leaguewizard.api.utils.ssl_context","title":"<code>ssl_context(cert_path=riot_cert_path)</code>","text":"<p>Creates an SSL context for client connections.</p> <p>Parameters:</p> Name Type Description Default <code>cert_path</code> <code>Path</code> <p>The path to the CA certificate file.</p> <code>riot_cert_path</code> <p>Returns:</p> Type Description <code>SSLContext</code> <p>An SSLContext object configured for client use.</p> Source code in <code>src\\leaguewizard\\api\\utils.py</code> <pre><code>def ssl_context(cert_path: Path = riot_cert_path) -&gt; ssl.SSLContext:\n    \"\"\"Creates an SSL context for client connections.\n\n    Args:\n        cert_path: The path to the CA certificate file.\n\n    Returns:\n        An SSLContext object configured for client use.\n    \"\"\"\n    context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)\n    context.load_verify_locations(cert_path)\n    context.check_hostname = False\n    return context\n</code></pre>"},{"location":"reference/leaguewizard/config/","title":"config","text":"<p>Handles loading the application configuration from a 'config.toml' file.</p> <p>This module searches for 'config.toml' in several predefined locations: 1. User's local appdata directory (e.g., %LOCALAPPDATA%/LeagueWizard/config.toml). 2. The directory of the executable if the application is frozen. 3. The module's own directory if running as a script.</p> <p>If a configuration file is found, its contents are loaded into the <code>WizConfig</code> variable. If no file is found, a default <code>WizConfig</code> is provided.</p>"},{"location":"reference/leaguewizard/core/","title":"core","text":"<p>Generic init.py.</p>"},{"location":"reference/leaguewizard/core/constants/","title":"constants","text":"<p>Defines constant values used throughout the LeagueWizard application.</p> <p>This module centralizes various fixed data, such as role mappings, summoner spell IDs, API response error codes, and minimum Python version requirements.</p>"},{"location":"reference/leaguewizard/core/exceptions/","title":"exceptions","text":"<p>Exceptions module for LeWizard.</p>"},{"location":"reference/leaguewizard/core/exceptions/#leaguewizard.core.exceptions.LeWizardGenericError","title":"<code>LeWizardGenericError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base custom exception error for LeagueWizard.</p> Source code in <code>src\\leaguewizard\\core\\exceptions.py</code> <pre><code>class LeWizardGenericError(Exception):\n    \"\"\"Base custom exception error for LeagueWizard.\"\"\"\n\n    def __init__(\n        self,\n        *,\n        message: str = \"\",\n        show: bool = False,\n        title: str = \"\",\n        terminate: bool = False,\n    ) -&gt; None:\n        \"\"\"Initializes the LeWizardGenericError.\n\n        Args:\n            message (str): The error message.\n            show (bool): If True, displays a message box with the error.\n                Defaults to False.\n            title (str): The title for the message box, if shown. Defaults to \"\".\n            terminate (bool): If True, exits the application after handling the error.\n                Defaults to False.\n        \"\"\"\n        super().__init__(message)\n        if show:\n            messagebox.showerror(title=title, message=message)\n        if terminate:\n            sys.exit(0)\n</code></pre>"},{"location":"reference/leaguewizard/core/exceptions/#leaguewizard.core.exceptions.LeWizardGenericError.__init__","title":"<code>__init__(*, message='', show=False, title='', terminate=False)</code>","text":"<p>Initializes the LeWizardGenericError.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The error message.</p> <code>''</code> <code>show</code> <code>bool</code> <p>If True, displays a message box with the error. Defaults to False.</p> <code>False</code> <code>title</code> <code>str</code> <p>The title for the message box, if shown. Defaults to \"\".</p> <code>''</code> <code>terminate</code> <code>bool</code> <p>If True, exits the application after handling the error. Defaults to False.</p> <code>False</code> Source code in <code>src\\leaguewizard\\core\\exceptions.py</code> <pre><code>def __init__(\n    self,\n    *,\n    message: str = \"\",\n    show: bool = False,\n    title: str = \"\",\n    terminate: bool = False,\n) -&gt; None:\n    \"\"\"Initializes the LeWizardGenericError.\n\n    Args:\n        message (str): The error message.\n        show (bool): If True, displays a message box with the error.\n            Defaults to False.\n        title (str): The title for the message box, if shown. Defaults to \"\".\n        terminate (bool): If True, exits the application after handling the error.\n            Defaults to False.\n    \"\"\"\n    super().__init__(message)\n    if show:\n        messagebox.showerror(title=title, message=message)\n    if terminate:\n        sys.exit(0)\n</code></pre>"},{"location":"reference/leaguewizard/core/models/","title":"models","text":"<p>Defines Pydantic models for various LeagueClientUpdates payloads and event schemas.</p> <p>These models are used for serializing and deserializing data exchanged with the League of Legends client, ensuring type safety and data validation.</p>"},{"location":"reference/leaguewizard/core/models/#leaguewizard.core.models.Action","title":"<code>Action</code>","text":"<p>               Bases: <code>Payload</code></p> <p>Champion selection action.</p> <p>Attributes:</p> Name Type Description <code>actor_cell_id</code> <code>int</code> <p>Cell ID of the player performing the action.</p> <code>champion_id</code> <code>int</code> <p>Selected champion ID.</p> <code>completed</code> <code>bool</code> <p>Whether the action is completed.</p> <code>type</code> <code>str</code> <p>Type of action.</p> Source code in <code>src\\leaguewizard\\core\\models.py</code> <pre><code>class Action(Payload):\n    \"\"\"Champion selection action.\n\n    Attributes:\n        actor_cell_id (int): Cell ID of the player performing the action.\n        champion_id (int): Selected champion ID.\n        completed (bool): Whether the action is completed.\n        type (str): Type of action.\n    \"\"\"\n\n    actor_cell_id: int = Field(..., alias=\"actorCellId\")\n    champion_id: int = Field(..., alias=\"championId\")\n    completed: bool\n    type: str\n</code></pre>"},{"location":"reference/leaguewizard/core/models/#leaguewizard.core.models.Ally","title":"<code>Ally</code>","text":"<p>               Bases: <code>Payload</code></p> <p>Ally team member information.</p> <p>Attributes:</p> Name Type Description <code>assigned_position</code> <code>str</code> <p>Assigned lane or role.</p> <code>cell_id</code> <code>int</code> <p>Player's cell ID.</p> <code>champion_id</code> <code>int</code> <p>Selected champion ID.</p> <code>selected_skin_id</code> <code>int</code> <p>Selected skin ID.</p> <code>summoner_id</code> <code>int</code> <p>Player's summoner ID.</p> <code>wardSkin_id</code> <code>int</code> <p>Selected ward skin ID.</p> Source code in <code>src\\leaguewizard\\core\\models.py</code> <pre><code>class Ally(Payload):\n    \"\"\"Ally team member information.\n\n    Attributes:\n        assigned_position (str): Assigned lane or role.\n        cell_id (int): Player's cell ID.\n        champion_id (int): Selected champion ID.\n        selected_skin_id (int): Selected skin ID.\n        summoner_id (int): Player's summoner ID.\n        wardSkin_id (int): Selected ward skin ID.\n    \"\"\"\n\n    assigned_position: str = Field(..., alias=\"assignedPosition\")\n    cell_id: int = Field(..., alias=\"cellId\")\n    champion_id: int = Field(..., alias=\"championId\")\n    selected_skin_id: int = Field(..., alias=\"selectedSkinId\")\n    summoner_id: int = Field(..., alias=\"summonerId\")\n    ward_skin_id: int = Field(..., alias=\"wardSkinId\")\n</code></pre>"},{"location":"reference/leaguewizard/core/models/#leaguewizard.core.models.Block","title":"<code>Block</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A group of items within an item set.</p> <p>Attributes:</p> Name Type Description <code>items</code> <code>list[Item]</code> <p>List of items in the block.</p> <code>type</code> <code>str</code> <p>Block title or category (e.g., \"Core Items\").</p> Source code in <code>src\\leaguewizard\\core\\models.py</code> <pre><code>class Block(BaseModel):\n    \"\"\"A group of items within an item set.\n\n    Attributes:\n        items (list[Item]): List of items in the block.\n        type (str): Block title or category (e.g., \"Core Items\").\n    \"\"\"\n\n    items: list[Item]\n    type: str\n</code></pre>"},{"location":"reference/leaguewizard/core/models/#leaguewizard.core.models.EventSchema","title":"<code>EventSchema</code>","text":"<p>               Bases: <code>Payload</code></p> <p>Champion selection event data structure.</p> <p>Attributes:</p> Name Type Description <code>actions</code> <code>list[Action]</code> <p>List of champion selection actions.</p> <code>local_player_cell_id</code> <code>int</code> <p>Local player's cell ID.</p> <code>my_team</code> <code>list[Ally]</code> <p>List of ally team members.</p> Source code in <code>src\\leaguewizard\\core\\models.py</code> <pre><code>class EventSchema(Payload):\n    \"\"\"Champion selection event data structure.\n\n    Attributes:\n        actions (list[Action]): List of champion selection actions.\n        local_player_cell_id (int): Local player's cell ID.\n        my_team (list[Ally]): List of ally team members.\n    \"\"\"\n\n    actions: list[Action]\n    local_player_cell_id: int = Field(..., alias=\"localPlayerCellId\")\n    my_team: list[Ally] = Field(..., alias=\"myTeam\")\n</code></pre>"},{"location":"reference/leaguewizard/core/models/#leaguewizard.core.models.Item","title":"<code>Item</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Individual item configuration.</p> <p>Attributes:</p> Name Type Description <code>count</code> <code>int</code> <p>Number of item units to display.</p> <code>id</code> <code>str</code> <p>Item identifier.</p> Source code in <code>src\\leaguewizard\\core\\models.py</code> <pre><code>class Item(BaseModel):\n    \"\"\"Individual item configuration.\n\n    Attributes:\n        count (int): Number of item units to display.\n        id (str): Item identifier.\n    \"\"\"\n\n    count: int\n    id: str\n</code></pre>"},{"location":"reference/leaguewizard/core/models/#leaguewizard.core.models.ItemSet","title":"<code>ItemSet</code>","text":"<p>               Bases: <code>Payload</code></p> <p>Represents a single item set configuration.</p> <p>Attributes:</p> Name Type Description <code>associated_champions</code> <code>list[int]</code> <p>Champion IDs this set applies to.</p> <code>blocks</code> <code>list[Block]</code> <p>List of item blocks in the set.</p> <code>title</code> <code>str</code> <p>Name of the item set (e.g., \"Ezreal - ADC\").</p> Source code in <code>src\\leaguewizard\\core\\models.py</code> <pre><code>class ItemSet(Payload):\n    \"\"\"Represents a single item set configuration.\n\n    Attributes:\n        associated_champions (list[int]): Champion IDs this set applies to.\n        blocks (list[Block]): List of item blocks in the set.\n        title (str): Name of the item set (e.g., \"Ezreal - ADC\").\n    \"\"\"\n\n    associated_champions: list[int] = Field(..., alias=\"associatedChampions\")\n    blocks: list[Block]\n    title: str\n</code></pre>"},{"location":"reference/leaguewizard/core/models/#leaguewizard.core.models.Payload","title":"<code>Payload</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for all payload models, providing common serialization.</p> Source code in <code>src\\leaguewizard\\core\\models.py</code> <pre><code>class Payload(BaseModel):\n    \"\"\"Base class for all payload models, providing common serialization.\"\"\"\n\n    def asjson(self) -&gt; dict[str, Any]:\n        \"\"\"Converts the model instance to a dictionary, using aliases for field names.\n\n        Returns:\n            dict[str, Any]: A dictionary representation of the model.\n        \"\"\"\n        return self.model_dump(by_alias=True)\n</code></pre>"},{"location":"reference/leaguewizard/core/models/#leaguewizard.core.models.Payload.asjson","title":"<code>asjson()</code>","text":"<p>Converts the model instance to a dictionary, using aliases for field names.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: A dictionary representation of the model.</p> Source code in <code>src\\leaguewizard\\core\\models.py</code> <pre><code>def asjson(self) -&gt; dict[str, Any]:\n    \"\"\"Converts the model instance to a dictionary, using aliases for field names.\n\n    Returns:\n        dict[str, Any]: A dictionary representation of the model.\n    \"\"\"\n    return self.model_dump(by_alias=True)\n</code></pre>"},{"location":"reference/leaguewizard/core/models/#leaguewizard.core.models.PayloadItemSets","title":"<code>PayloadItemSets</code>","text":"<p>               Bases: <code>Payload</code></p> <p>Payload for the itemsets endpoint (/lol-item-sets/v1/item-sets/{accountId}/sets).</p> <p>Attributes:</p> Name Type Description <code>account_id</code> <code>int</code> <p>Summoner account ID.</p> <code>item_sets</code> <code>list[ItemSet]</code> <p>List of item sets. Defaults to None.</p> <code>timestamp</code> <code>int</code> <p>Timestamp value. Defaults to 1 (unused).</p> Source code in <code>src\\leaguewizard\\core\\models.py</code> <pre><code>class PayloadItemSets(Payload):\n    \"\"\"Payload for the itemsets endpoint (/lol-item-sets/v1/item-sets/{accountId}/sets).\n\n    Attributes:\n        account_id (int): Summoner account ID.\n        item_sets (list[ItemSet]): List of item sets. Defaults to None.\n        timestamp (int): Timestamp value. Defaults to 1 (unused).\n    \"\"\"\n\n    account_id: int = Field(..., alias=\"accountId\")\n    item_sets: list[ItemSet] = Field(..., alias=\"itemSets\")\n    timestamp: int = 1\n</code></pre>"},{"location":"reference/leaguewizard/core/models/#leaguewizard.core.models.PayloadPerks","title":"<code>PayloadPerks</code>","text":"<p>               Bases: <code>Payload</code></p> <p>Payload for the rune pages endpoint (/lol-perks/v1/pages).</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Rune page name.</p> <code>primary_style_id</code> <code>int</code> <p>Primary rune style ID.</p> <code>sub_style_id</code> <code>int</code> <p>Secondary rune style ID.</p> <code>current</code> <code>bool</code> <p>Whether this is the current page. Defaults to True.</p> <code>selected_perk_ids</code> <code>list[int]</code> <p>List of selected perk IDs.</p> Source code in <code>src\\leaguewizard\\core\\models.py</code> <pre><code>class PayloadPerks(Payload):\n    \"\"\"Payload for the rune pages endpoint (/lol-perks/v1/pages).\n\n    Attributes:\n        name (str): Rune page name.\n        primary_style_id (int): Primary rune style ID.\n        sub_style_id (int): Secondary rune style ID.\n        current (bool): Whether this is the current page. Defaults to True.\n        selected_perk_ids (list[int]): List of selected perk IDs.\n    \"\"\"\n\n    name: str\n    primary_style_id: int = Field(..., alias=\"primaryStyleId\")\n    sub_style_id: int = Field(..., alias=\"subStyleId\")\n    current: bool\n    selected_perk_ids: list[int] = Field(..., alias=\"selectedPerkIds\")\n</code></pre>"},{"location":"reference/leaguewizard/core/models/#leaguewizard.core.models.PayloadSpells","title":"<code>PayloadSpells</code>","text":"<p>               Bases: <code>Payload</code></p> <p>Payload for the spells endpoint (/lol-champ-select/v1/session/my-selection).</p> <p>Attributes:</p> Name Type Description <code>spell1_id</code> <code>int</code> <p>Summoner spell ID for the D key.</p> <code>spell2_id</code> <code>int</code> <p>Summoner spell ID for the F key.</p> <code>selected_skin_id</code> <code>int</code> <p>Selected champion skin ID.</p> Source code in <code>src\\leaguewizard\\core\\models.py</code> <pre><code>class PayloadSpells(Payload):\n    \"\"\"Payload for the spells endpoint (/lol-champ-select/v1/session/my-selection).\n\n    Attributes:\n        spell1_id (int): Summoner spell ID for the D key.\n        spell2_id (int): Summoner spell ID for the F key.\n        selected_skin_id (int): Selected champion skin ID.\n    \"\"\"\n\n    spell1_id: int = Field(..., alias=\"spell1Id\")\n    spell2_id: int = Field(..., alias=\"spell2Id\")\n    selected_skin_id: int = Field(..., alias=\"selectedSkinId\")\n</code></pre>"},{"location":"reference/leaguewizard/data/","title":"data","text":"<p>League Wizard data path constants.</p> <p>This module defines paths to important data files for the League Wizard application. It includes the path to the application's logo icon and the Riot Games certificate for secure communication.</p>"},{"location":"reference/leaguewizard/data/certs/","title":"certs","text":"<p>Generic init.py.</p>"},{"location":"reference/leaguewizard/data/images/","title":"images","text":"<p>Generic init.py.</p>"},{"location":"reference/leaguewizard/mobalytics/","title":"mobalytics","text":"<p>Initializes the leaguewizard.mobalytics.mobalytics submodule.</p> <p>This module imports all public objects from the leaguewizard.mobalytics.mobalytics module.</p>"},{"location":"reference/leaguewizard/mobalytics/#leaguewizard.mobalytics.ItemsetsParser","title":"<code>ItemsetsParser</code>","text":"<p>               Bases: <code>BaseParser</code></p> <p>A parser for champion item sets.</p> Source code in <code>src\\leaguewizard\\mobalytics\\parsers.py</code> <pre><code>class ItemsetsParser(BaseParser):\n    \"\"\"A parser for champion item sets.\"\"\"\n\n    def parse(\n        self,\n        account_id: int,\n        champion_id: int,\n        champion_name: str,\n        role: str,\n    ) -&gt; None:\n        \"\"\"Parses the item sets from the HTML for a specific champion and role.\n\n        Args:\n            account_id (int): The account ID.\n            champion_id (int): The champion ID.\n            champion_name (str): The champion name.\n            role (str): The role or game mode (e.g., 'aram').\n        \"\"\"\n        item_sets = (\n            self._get_aram_item_sets() if role == \"aram\" else self._get_sr_item_sets()\n        )\n        self._payload = self._get_item_sets_payload(\n            item_sets,\n            account_id,\n            champion_id,\n            champion_name,\n            role,\n        )\n\n    def _get_sr_item_sets(self) -&gt; dict[str, Any]:\n        \"\"\"Extracts Summoner's Rift item sets from the HTML.\"\"\"\n        container_div = self.html.css_first(\"div.m-owe8v3:nth-child(2)\")\n\n        if container_div is None:\n            raise ValueError\n\n        tree = container_div.css(\".m-1q4a7cx\") + self.html.css(\".m-s76v8c\")\n        itemsets = self._get_itemsets(tree)\n        return {\n            \"Starter Items\": itemsets[0],\n            \"Early Items\": itemsets[1],\n            \"Core Items\": itemsets[2],\n            \"Full Build\": itemsets[3],\n            \"Situational Items\": itemsets[4],\n        }\n\n    def _get_aram_item_sets(self) -&gt; dict[str, Any]:\n        \"\"\"Extracts ARAM item sets from the HTML.\"\"\"\n        container_div = self.html.css_first(\"div.m-owe8v3:nth-child(2)\")\n\n        if container_div is None:\n            raise ValueError\n\n        tree = container_div.css(\".m-1q4a7cx\") + self.html.css(\".m-s76v8c\")\n        itemsets = self._get_itemsets(tree)\n        return {\n            \"Starter Items\": itemsets[0],\n            \"Core Items\": itemsets[1],\n            \"Full Build\": itemsets[2],\n            \"Situational Items\": itemsets[3],\n        }\n\n    @staticmethod\n    def _get_itemsets(tree: list[Node]) -&gt; list[list[Any]]:\n        \"\"\"Extracts item sets from a list of HTML nodes.\n\n        This method processes a list of HTML nodes, extracting item IDs from  image sources\n        found within each node. It iterates through each node,  retrieves the image elements,\n        and uses a regular expression to match  and extract the item IDs from the image source\n        URLs. The resulting  item IDs are collected into groups and returned as a list of lists.\n\n        Args:\n            tree (list[Node]): A list of HTML nodes containing item images.\n        \"\"\"\n        item_sets_groups = []\n\n        for node in tree:\n            items = []\n\n            for img in node.css(\"img\"):\n                src = img.attributes.get(\"src\")\n                matches = re.search(r\"/(\\d+)\\.png\", src) if src else None\n\n                if matches:\n                    items.append(matches.group(1))\n\n            item_sets_groups.append(items)\n        return item_sets_groups\n\n    @staticmethod\n    def _get_item_sets_payload(\n        item_sets: dict,\n        account_id: int,\n        champion_id: int,\n        champion_name: str,\n        role: str,\n    ) -&gt; Any:\n        \"\"\"Creates the payload for the item sets.\"\"\"\n        blocks = []\n        for block, items in item_sets.items():\n            item_list = [Item(count=1, id=item) for item in items]\n            blocks.append(Block(items=item_list, type=block))\n        itemset = ItemSet(\n            associatedChampions=[champion_id],\n            blocks=blocks,\n            title=f\"{champion_name.capitalize()} - {role.upper()}\",\n        )\n        return PayloadItemSets(accountId=account_id, itemSets=[itemset], timestamp=0)\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/#leaguewizard.mobalytics.ItemsetsParser.parse","title":"<code>parse(account_id, champion_id, champion_name, role)</code>","text":"<p>Parses the item sets from the HTML for a specific champion and role.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>The account ID.</p> required <code>champion_id</code> <code>int</code> <p>The champion ID.</p> required <code>champion_name</code> <code>str</code> <p>The champion name.</p> required <code>role</code> <code>str</code> <p>The role or game mode (e.g., 'aram').</p> required Source code in <code>src\\leaguewizard\\mobalytics\\parsers.py</code> <pre><code>def parse(\n    self,\n    account_id: int,\n    champion_id: int,\n    champion_name: str,\n    role: str,\n) -&gt; None:\n    \"\"\"Parses the item sets from the HTML for a specific champion and role.\n\n    Args:\n        account_id (int): The account ID.\n        champion_id (int): The champion ID.\n        champion_name (str): The champion name.\n        role (str): The role or game mode (e.g., 'aram').\n    \"\"\"\n    item_sets = (\n        self._get_aram_item_sets() if role == \"aram\" else self._get_sr_item_sets()\n    )\n    self._payload = self._get_item_sets_payload(\n        item_sets,\n        account_id,\n        champion_id,\n        champion_name,\n        role,\n    )\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/#leaguewizard.mobalytics.LeWizardGenericError","title":"<code>LeWizardGenericError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base custom exception error for LeagueWizard.</p> Source code in <code>src\\leaguewizard\\core\\exceptions.py</code> <pre><code>class LeWizardGenericError(Exception):\n    \"\"\"Base custom exception error for LeagueWizard.\"\"\"\n\n    def __init__(\n        self,\n        *,\n        message: str = \"\",\n        show: bool = False,\n        title: str = \"\",\n        terminate: bool = False,\n    ) -&gt; None:\n        \"\"\"Initializes the LeWizardGenericError.\n\n        Args:\n            message (str): The error message.\n            show (bool): If True, displays a message box with the error.\n                Defaults to False.\n            title (str): The title for the message box, if shown. Defaults to \"\".\n            terminate (bool): If True, exits the application after handling the error.\n                Defaults to False.\n        \"\"\"\n        super().__init__(message)\n        if show:\n            messagebox.showerror(title=title, message=message)\n        if terminate:\n            sys.exit(0)\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/#leaguewizard.mobalytics.LeWizardGenericError.__init__","title":"<code>__init__(*, message='', show=False, title='', terminate=False)</code>","text":"<p>Initializes the LeWizardGenericError.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The error message.</p> <code>''</code> <code>show</code> <code>bool</code> <p>If True, displays a message box with the error. Defaults to False.</p> <code>False</code> <code>title</code> <code>str</code> <p>The title for the message box, if shown. Defaults to \"\".</p> <code>''</code> <code>terminate</code> <code>bool</code> <p>If True, exits the application after handling the error. Defaults to False.</p> <code>False</code> Source code in <code>src\\leaguewizard\\core\\exceptions.py</code> <pre><code>def __init__(\n    self,\n    *,\n    message: str = \"\",\n    show: bool = False,\n    title: str = \"\",\n    terminate: bool = False,\n) -&gt; None:\n    \"\"\"Initializes the LeWizardGenericError.\n\n    Args:\n        message (str): The error message.\n        show (bool): If True, displays a message box with the error.\n            Defaults to False.\n        title (str): The title for the message box, if shown. Defaults to \"\".\n        terminate (bool): If True, exits the application after handling the error.\n            Defaults to False.\n    \"\"\"\n    super().__init__(message)\n    if show:\n        messagebox.showerror(title=title, message=message)\n    if terminate:\n        sys.exit(0)\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/#leaguewizard.mobalytics.MobaChampion","title":"<code>MobaChampion</code>","text":"<p>Represents the champion mobalytics webpage.</p> Source code in <code>src\\leaguewizard\\mobalytics\\mobalytics.py</code> <pre><code>class MobaChampion:\n    \"\"\"Represents the champion mobalytics webpage.\"\"\"\n\n    def __init__(self, champion_name: str, role: str) -&gt; None:\n        \"\"\"Initializes the MobaChampion instance.\n\n        Args:\n            champion_name (str): The name of the champion.\n            role (str): The role of the champion (e.g., \"top\", \"aram\").\n        \"\"\"\n        self.champion_name = champion_name\n        self.role = role\n        self.url = self._build_url()\n        self.html: HTMLParser | None = None\n\n    def _build_url(self) -&gt; str:\n        \"\"\"Builds the Mobalytics URL for the champion and role.\"\"\"\n        base_url = \"https://mobalytics.gg/lol/champions\"\n        endpoint = (\n            f\"{self.champion_name}/build/{self.role}\"\n            if self.role != \"aram\"\n            else f\"{self.champion_name}/aram-builds\"\n        )\n        return f\"{base_url}/{endpoint}\"\n\n    async def fetch_data(self, client: aiohttp.ClientSession) -&gt; HTMLParser:\n        \"\"\"Fetches and parses the HTML content of the Mobalytics champion page.\n\n        Args:\n            client (aiohttp.ClientSession): The aiohttp client session.\n\n        Returns:\n            HTMLParser: The parsed HTML content.\n\n        Raises:\n            LeWizardGenericError: If the champion HTML could not be retrieved.\n        \"\"\"\n        try:\n            response = await client.get(self.url)\n            if response.status &gt;= RESPONSE_ERROR_CODE:\n                logger.debug(f\"request failed: {response.request_info}\")\n            content = await response.text()\n            self.html = HTMLParser(content)\n\n        except aiohttp.ClientResponseError as e:\n            raise LeWizardGenericError from e\n\n        return self.html\n\n    def itemsets_payload(self, summoner_id: int, champion_id: int) -&gt; Any:\n        \"\"\"Generates the item sets payload for the LCU API.\n\n        Args:\n            summoner_id (int): The summoner's ID.\n            champion_id (int): The champion's ID.\n\n        Returns:\n            Any: The PayloadItemSets object or None if HTML content is not available.\n        \"\"\"\n        if self.html is None:\n            return None\n        itemsets = ItemsetsParser(html=self.html)\n        itemsets.parse(\n            account_id=summoner_id,\n            champion_id=champion_id,\n            champion_name=self.champion_name,\n            role=self.role,\n        )\n        return itemsets.payload\n\n    def perks_payload(self) -&gt; Any:\n        \"\"\"Generates the perks payload for the LCU API.\"\"\"\n        if self.html is None:\n            return None\n        perks = PerksParser(self.html)\n        perks.parse(champion_name=self.champion_name, role=self.role)\n        return perks.payload\n\n    def spells_payload(self) -&gt; Any:\n        \"\"\"Generates the spells payload for the LCU API.\"\"\"\n        if self.html is None:\n            return None\n        spells = SpellsParser(self.html)\n        spells.parse()\n        return spells.payload\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/#leaguewizard.mobalytics.MobaChampion.__init__","title":"<code>__init__(champion_name, role)</code>","text":"<p>Initializes the MobaChampion instance.</p> <p>Parameters:</p> Name Type Description Default <code>champion_name</code> <code>str</code> <p>The name of the champion.</p> required <code>role</code> <code>str</code> <p>The role of the champion (e.g., \"top\", \"aram\").</p> required Source code in <code>src\\leaguewizard\\mobalytics\\mobalytics.py</code> <pre><code>def __init__(self, champion_name: str, role: str) -&gt; None:\n    \"\"\"Initializes the MobaChampion instance.\n\n    Args:\n        champion_name (str): The name of the champion.\n        role (str): The role of the champion (e.g., \"top\", \"aram\").\n    \"\"\"\n    self.champion_name = champion_name\n    self.role = role\n    self.url = self._build_url()\n    self.html: HTMLParser | None = None\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/#leaguewizard.mobalytics.MobaChampion.fetch_data","title":"<code>fetch_data(client)</code>  <code>async</code>","text":"<p>Fetches and parses the HTML content of the Mobalytics champion page.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>ClientSession</code> <p>The aiohttp client session.</p> required <p>Returns:</p> Name Type Description <code>HTMLParser</code> <code>HTMLParser</code> <p>The parsed HTML content.</p> <p>Raises:</p> Type Description <code>LeWizardGenericError</code> <p>If the champion HTML could not be retrieved.</p> Source code in <code>src\\leaguewizard\\mobalytics\\mobalytics.py</code> <pre><code>async def fetch_data(self, client: aiohttp.ClientSession) -&gt; HTMLParser:\n    \"\"\"Fetches and parses the HTML content of the Mobalytics champion page.\n\n    Args:\n        client (aiohttp.ClientSession): The aiohttp client session.\n\n    Returns:\n        HTMLParser: The parsed HTML content.\n\n    Raises:\n        LeWizardGenericError: If the champion HTML could not be retrieved.\n    \"\"\"\n    try:\n        response = await client.get(self.url)\n        if response.status &gt;= RESPONSE_ERROR_CODE:\n            logger.debug(f\"request failed: {response.request_info}\")\n        content = await response.text()\n        self.html = HTMLParser(content)\n\n    except aiohttp.ClientResponseError as e:\n        raise LeWizardGenericError from e\n\n    return self.html\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/#leaguewizard.mobalytics.MobaChampion.itemsets_payload","title":"<code>itemsets_payload(summoner_id, champion_id)</code>","text":"<p>Generates the item sets payload for the LCU API.</p> <p>Parameters:</p> Name Type Description Default <code>summoner_id</code> <code>int</code> <p>The summoner's ID.</p> required <code>champion_id</code> <code>int</code> <p>The champion's ID.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The PayloadItemSets object or None if HTML content is not available.</p> Source code in <code>src\\leaguewizard\\mobalytics\\mobalytics.py</code> <pre><code>def itemsets_payload(self, summoner_id: int, champion_id: int) -&gt; Any:\n    \"\"\"Generates the item sets payload for the LCU API.\n\n    Args:\n        summoner_id (int): The summoner's ID.\n        champion_id (int): The champion's ID.\n\n    Returns:\n        Any: The PayloadItemSets object or None if HTML content is not available.\n    \"\"\"\n    if self.html is None:\n        return None\n    itemsets = ItemsetsParser(html=self.html)\n    itemsets.parse(\n        account_id=summoner_id,\n        champion_id=champion_id,\n        champion_name=self.champion_name,\n        role=self.role,\n    )\n    return itemsets.payload\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/#leaguewizard.mobalytics.MobaChampion.perks_payload","title":"<code>perks_payload()</code>","text":"<p>Generates the perks payload for the LCU API.</p> Source code in <code>src\\leaguewizard\\mobalytics\\mobalytics.py</code> <pre><code>def perks_payload(self) -&gt; Any:\n    \"\"\"Generates the perks payload for the LCU API.\"\"\"\n    if self.html is None:\n        return None\n    perks = PerksParser(self.html)\n    perks.parse(champion_name=self.champion_name, role=self.role)\n    return perks.payload\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/#leaguewizard.mobalytics.MobaChampion.spells_payload","title":"<code>spells_payload()</code>","text":"<p>Generates the spells payload for the LCU API.</p> Source code in <code>src\\leaguewizard\\mobalytics\\mobalytics.py</code> <pre><code>def spells_payload(self) -&gt; Any:\n    \"\"\"Generates the spells payload for the LCU API.\"\"\"\n    if self.html is None:\n        return None\n    spells = SpellsParser(self.html)\n    spells.parse()\n    return spells.payload\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/#leaguewizard.mobalytics.PerksParser","title":"<code>PerksParser</code>","text":"<p>               Bases: <code>BaseParser</code></p> <p>A parser for champion rune (perks) pages.</p> Source code in <code>src\\leaguewizard\\mobalytics\\parsers.py</code> <pre><code>class PerksParser(BaseParser):\n    \"\"\"A parser for champion rune (perks) pages.\"\"\"\n\n    def parse(self, champion_name: str, role: str) -&gt; None:\n        \"\"\"Parses the perks from the HTML and creates a PayloadPerks object.\n\n        Args:\n            champion_name (str): The name of the champion.\n            role (str): The role of the champion (e.g., \"top\", \"aram\").\n        \"\"\"\n        perks = self._get_perks()\n        self._payload = PayloadPerks(\n            current=True,\n            name=f\"{champion_name.capitalize()} - {role.upper()}\",\n            primaryStyleId=perks[0],\n            subStyleId=perks[1],\n            selectedPerkIds=perks[2:],\n        )\n\n    def _get_perks(self) -&gt; Any:\n        \"\"\"Retrieve a list of perks from the HTML content.\n\n        This function searches for specific image sources in the HTML using predefined CSS\n        selectors. It extracts the numeric values from the image filenames, which represent the\n        perks. If no valid perks are found, a ValueError is raised. The function relies on the\n        `self.html.css` method to access the HTML nodes and uses regular expressions to parse\n        the image source strings.\n\n        Raises:\n            ValueError: If no perks are found in the HTML content.\n        \"\"\"\n        perks_selectors = [\".m-68x97p\", \".m-1iebrlh\", \".m-1nx2cdb\", \".m-1u3ui07\"]\n        srcs = [\n            node.attributes.get(\"src\")\n            for selector in perks_selectors\n            for node in self.html.css(selector)\n        ]\n        matches = [\n            re.search(r\"/(\\d+)\\.(svg|png)\\b\", src) for src in srcs if src is not None\n        ]\n        if matches:\n            perks = [int(match.group(1)) for match in matches if match is not None]\n        if len(perks) == 0:\n            raise ValueError\n        return perks\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/#leaguewizard.mobalytics.PerksParser.parse","title":"<code>parse(champion_name, role)</code>","text":"<p>Parses the perks from the HTML and creates a PayloadPerks object.</p> <p>Parameters:</p> Name Type Description Default <code>champion_name</code> <code>str</code> <p>The name of the champion.</p> required <code>role</code> <code>str</code> <p>The role of the champion (e.g., \"top\", \"aram\").</p> required Source code in <code>src\\leaguewizard\\mobalytics\\parsers.py</code> <pre><code>def parse(self, champion_name: str, role: str) -&gt; None:\n    \"\"\"Parses the perks from the HTML and creates a PayloadPerks object.\n\n    Args:\n        champion_name (str): The name of the champion.\n        role (str): The role of the champion (e.g., \"top\", \"aram\").\n    \"\"\"\n    perks = self._get_perks()\n    self._payload = PayloadPerks(\n        current=True,\n        name=f\"{champion_name.capitalize()} - {role.upper()}\",\n        primaryStyleId=perks[0],\n        subStyleId=perks[1],\n        selectedPerkIds=perks[2:],\n    )\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/#leaguewizard.mobalytics.SpellsParser","title":"<code>SpellsParser</code>","text":"<p>               Bases: <code>BaseParser</code></p> <p>A parser for champion summoner spells.</p> Source code in <code>src\\leaguewizard\\mobalytics\\parsers.py</code> <pre><code>class SpellsParser(BaseParser):\n    \"\"\"A parser for champion summoner spells.\"\"\"\n\n    def parse(self) -&gt; None:\n        \"\"\"Parses summoner spells and creates a PayloadSpells object.\"\"\"\n        spells = self._get_spells()\n        flash_config = config.flash\n        flash_pos = 0 if flash_config == \"d\" else 1\n        spells = self._set_flash_position(spells, 4, flash_pos)\n        self._payload = PayloadSpells(\n            spell1Id=spells[0],\n            spell2Id=spells[1],\n            selectedSkinId=0,\n        )\n\n    def _get_spells(self) -&gt; list[int]:\n        \"\"\"Retrieve a list of spell integers from HTML nodes.\"\"\"\n        spells = []\n\n        nodes = self.html.css(\".m-d3vnz1\")\n        for node in nodes:\n            alt = node.attributes.get(\"alt\")\n            if not alt:\n                raise ValueError\n            spell = SPELLS[alt]\n            spells.append(int(spell))\n        if not spells:\n            raise ValueError\n        return spells\n\n    @staticmethod\n    def _set_flash_position(\n        spell_list: list[int],\n        spell_id: int = 4,\n        index: int = 1,\n    ) -&gt; list[int]:\n        \"\"\"Sets the position of a spell ID in the spell list.\"\"\"\n        if spell_id not in spell_list:\n            return spell_list\n\n        spell_list = [x for x in spell_list if x != spell_id]\n        spell_list.insert(index, spell_id)\n        return spell_list\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/#leaguewizard.mobalytics.SpellsParser.parse","title":"<code>parse()</code>","text":"<p>Parses summoner spells and creates a PayloadSpells object.</p> Source code in <code>src\\leaguewizard\\mobalytics\\parsers.py</code> <pre><code>def parse(self) -&gt; None:\n    \"\"\"Parses summoner spells and creates a PayloadSpells object.\"\"\"\n    spells = self._get_spells()\n    flash_config = config.flash\n    flash_pos = 0 if flash_config == \"d\" else 1\n    spells = self._set_flash_position(spells, 4, flash_pos)\n    self._payload = PayloadSpells(\n        spell1Id=spells[0],\n        spell2Id=spells[1],\n        selectedSkinId=0,\n    )\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/#leaguewizard.mobalytics.get_mobalytics_info","title":"<code>get_mobalytics_info(champion_name, role, conn, champion_id, summoner_id)</code>  <code>async</code>","text":"<p>Fetches Mobalytics item sets, perks, and spells for a champion and role.</p> Source code in <code>src\\leaguewizard\\mobalytics\\mobalytics.py</code> <pre><code>@alru_cache\nasync def get_mobalytics_info(\n    champion_name: str,\n    role: str | None,\n    conn: aiohttp.ClientSession,\n    champion_id: int,\n    summoner_id: int,\n) -&gt; Any:\n    \"\"\"Fetches Mobalytics item sets, perks, and spells for a champion and role.\"\"\"\n    try:\n        if role is None:\n            role = \"aram\"\n        champion = MobaChampion(champion_name, role)\n        await champion.fetch_data(conn)\n\n        itemsets_payload = champion.itemsets_payload(summoner_id, champion_id)\n        perks_payload = champion.perks_payload()\n        spells_payload = champion.spells_payload()\n\n        logger.debug(f\"Added to cache: {champion_name}\")\n\n    except (TypeError, AttributeError, ValueError, LeWizardGenericError) as e:\n        logger.exception(e)\n\n    return itemsets_payload, perks_payload, spells_payload\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/mobalytics/","title":"mobalytics","text":"<p>Mobalytics handler module.</p>"},{"location":"reference/leaguewizard/mobalytics/mobalytics/#leaguewizard.mobalytics.mobalytics.MobaChampion","title":"<code>MobaChampion</code>","text":"<p>Represents the champion mobalytics webpage.</p> Source code in <code>src\\leaguewizard\\mobalytics\\mobalytics.py</code> <pre><code>class MobaChampion:\n    \"\"\"Represents the champion mobalytics webpage.\"\"\"\n\n    def __init__(self, champion_name: str, role: str) -&gt; None:\n        \"\"\"Initializes the MobaChampion instance.\n\n        Args:\n            champion_name (str): The name of the champion.\n            role (str): The role of the champion (e.g., \"top\", \"aram\").\n        \"\"\"\n        self.champion_name = champion_name\n        self.role = role\n        self.url = self._build_url()\n        self.html: HTMLParser | None = None\n\n    def _build_url(self) -&gt; str:\n        \"\"\"Builds the Mobalytics URL for the champion and role.\"\"\"\n        base_url = \"https://mobalytics.gg/lol/champions\"\n        endpoint = (\n            f\"{self.champion_name}/build/{self.role}\"\n            if self.role != \"aram\"\n            else f\"{self.champion_name}/aram-builds\"\n        )\n        return f\"{base_url}/{endpoint}\"\n\n    async def fetch_data(self, client: aiohttp.ClientSession) -&gt; HTMLParser:\n        \"\"\"Fetches and parses the HTML content of the Mobalytics champion page.\n\n        Args:\n            client (aiohttp.ClientSession): The aiohttp client session.\n\n        Returns:\n            HTMLParser: The parsed HTML content.\n\n        Raises:\n            LeWizardGenericError: If the champion HTML could not be retrieved.\n        \"\"\"\n        try:\n            response = await client.get(self.url)\n            if response.status &gt;= RESPONSE_ERROR_CODE:\n                logger.debug(f\"request failed: {response.request_info}\")\n            content = await response.text()\n            self.html = HTMLParser(content)\n\n        except aiohttp.ClientResponseError as e:\n            raise LeWizardGenericError from e\n\n        return self.html\n\n    def itemsets_payload(self, summoner_id: int, champion_id: int) -&gt; Any:\n        \"\"\"Generates the item sets payload for the LCU API.\n\n        Args:\n            summoner_id (int): The summoner's ID.\n            champion_id (int): The champion's ID.\n\n        Returns:\n            Any: The PayloadItemSets object or None if HTML content is not available.\n        \"\"\"\n        if self.html is None:\n            return None\n        itemsets = ItemsetsParser(html=self.html)\n        itemsets.parse(\n            account_id=summoner_id,\n            champion_id=champion_id,\n            champion_name=self.champion_name,\n            role=self.role,\n        )\n        return itemsets.payload\n\n    def perks_payload(self) -&gt; Any:\n        \"\"\"Generates the perks payload for the LCU API.\"\"\"\n        if self.html is None:\n            return None\n        perks = PerksParser(self.html)\n        perks.parse(champion_name=self.champion_name, role=self.role)\n        return perks.payload\n\n    def spells_payload(self) -&gt; Any:\n        \"\"\"Generates the spells payload for the LCU API.\"\"\"\n        if self.html is None:\n            return None\n        spells = SpellsParser(self.html)\n        spells.parse()\n        return spells.payload\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/mobalytics/#leaguewizard.mobalytics.mobalytics.MobaChampion.__init__","title":"<code>__init__(champion_name, role)</code>","text":"<p>Initializes the MobaChampion instance.</p> <p>Parameters:</p> Name Type Description Default <code>champion_name</code> <code>str</code> <p>The name of the champion.</p> required <code>role</code> <code>str</code> <p>The role of the champion (e.g., \"top\", \"aram\").</p> required Source code in <code>src\\leaguewizard\\mobalytics\\mobalytics.py</code> <pre><code>def __init__(self, champion_name: str, role: str) -&gt; None:\n    \"\"\"Initializes the MobaChampion instance.\n\n    Args:\n        champion_name (str): The name of the champion.\n        role (str): The role of the champion (e.g., \"top\", \"aram\").\n    \"\"\"\n    self.champion_name = champion_name\n    self.role = role\n    self.url = self._build_url()\n    self.html: HTMLParser | None = None\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/mobalytics/#leaguewizard.mobalytics.mobalytics.MobaChampion.fetch_data","title":"<code>fetch_data(client)</code>  <code>async</code>","text":"<p>Fetches and parses the HTML content of the Mobalytics champion page.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>ClientSession</code> <p>The aiohttp client session.</p> required <p>Returns:</p> Name Type Description <code>HTMLParser</code> <code>HTMLParser</code> <p>The parsed HTML content.</p> <p>Raises:</p> Type Description <code>LeWizardGenericError</code> <p>If the champion HTML could not be retrieved.</p> Source code in <code>src\\leaguewizard\\mobalytics\\mobalytics.py</code> <pre><code>async def fetch_data(self, client: aiohttp.ClientSession) -&gt; HTMLParser:\n    \"\"\"Fetches and parses the HTML content of the Mobalytics champion page.\n\n    Args:\n        client (aiohttp.ClientSession): The aiohttp client session.\n\n    Returns:\n        HTMLParser: The parsed HTML content.\n\n    Raises:\n        LeWizardGenericError: If the champion HTML could not be retrieved.\n    \"\"\"\n    try:\n        response = await client.get(self.url)\n        if response.status &gt;= RESPONSE_ERROR_CODE:\n            logger.debug(f\"request failed: {response.request_info}\")\n        content = await response.text()\n        self.html = HTMLParser(content)\n\n    except aiohttp.ClientResponseError as e:\n        raise LeWizardGenericError from e\n\n    return self.html\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/mobalytics/#leaguewizard.mobalytics.mobalytics.MobaChampion.itemsets_payload","title":"<code>itemsets_payload(summoner_id, champion_id)</code>","text":"<p>Generates the item sets payload for the LCU API.</p> <p>Parameters:</p> Name Type Description Default <code>summoner_id</code> <code>int</code> <p>The summoner's ID.</p> required <code>champion_id</code> <code>int</code> <p>The champion's ID.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The PayloadItemSets object or None if HTML content is not available.</p> Source code in <code>src\\leaguewizard\\mobalytics\\mobalytics.py</code> <pre><code>def itemsets_payload(self, summoner_id: int, champion_id: int) -&gt; Any:\n    \"\"\"Generates the item sets payload for the LCU API.\n\n    Args:\n        summoner_id (int): The summoner's ID.\n        champion_id (int): The champion's ID.\n\n    Returns:\n        Any: The PayloadItemSets object or None if HTML content is not available.\n    \"\"\"\n    if self.html is None:\n        return None\n    itemsets = ItemsetsParser(html=self.html)\n    itemsets.parse(\n        account_id=summoner_id,\n        champion_id=champion_id,\n        champion_name=self.champion_name,\n        role=self.role,\n    )\n    return itemsets.payload\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/mobalytics/#leaguewizard.mobalytics.mobalytics.MobaChampion.perks_payload","title":"<code>perks_payload()</code>","text":"<p>Generates the perks payload for the LCU API.</p> Source code in <code>src\\leaguewizard\\mobalytics\\mobalytics.py</code> <pre><code>def perks_payload(self) -&gt; Any:\n    \"\"\"Generates the perks payload for the LCU API.\"\"\"\n    if self.html is None:\n        return None\n    perks = PerksParser(self.html)\n    perks.parse(champion_name=self.champion_name, role=self.role)\n    return perks.payload\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/mobalytics/#leaguewizard.mobalytics.mobalytics.MobaChampion.spells_payload","title":"<code>spells_payload()</code>","text":"<p>Generates the spells payload for the LCU API.</p> Source code in <code>src\\leaguewizard\\mobalytics\\mobalytics.py</code> <pre><code>def spells_payload(self) -&gt; Any:\n    \"\"\"Generates the spells payload for the LCU API.\"\"\"\n    if self.html is None:\n        return None\n    spells = SpellsParser(self.html)\n    spells.parse()\n    return spells.payload\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/mobalytics/#leaguewizard.mobalytics.mobalytics.get_mobalytics_info","title":"<code>get_mobalytics_info(champion_name, role, conn, champion_id, summoner_id)</code>  <code>async</code>","text":"<p>Fetches Mobalytics item sets, perks, and spells for a champion and role.</p> Source code in <code>src\\leaguewizard\\mobalytics\\mobalytics.py</code> <pre><code>@alru_cache\nasync def get_mobalytics_info(\n    champion_name: str,\n    role: str | None,\n    conn: aiohttp.ClientSession,\n    champion_id: int,\n    summoner_id: int,\n) -&gt; Any:\n    \"\"\"Fetches Mobalytics item sets, perks, and spells for a champion and role.\"\"\"\n    try:\n        if role is None:\n            role = \"aram\"\n        champion = MobaChampion(champion_name, role)\n        await champion.fetch_data(conn)\n\n        itemsets_payload = champion.itemsets_payload(summoner_id, champion_id)\n        perks_payload = champion.perks_payload()\n        spells_payload = champion.spells_payload()\n\n        logger.debug(f\"Added to cache: {champion_name}\")\n\n    except (TypeError, AttributeError, ValueError, LeWizardGenericError) as e:\n        logger.exception(e)\n\n    return itemsets_payload, perks_payload, spells_payload\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/parsers/","title":"parsers","text":"<p>Provides parsers for extracting specific data from HTML content.</p> <p>This module contains classes designed to parse web pages, specifically from Mobalytics, to extract information such as item sets for League of Legends champions.</p>"},{"location":"reference/leaguewizard/mobalytics/parsers/#leaguewizard.mobalytics.parsers.BaseParser","title":"<code>BaseParser</code>","text":"<p>               Bases: <code>ABC</code></p> <p>An abstract base class for parsers.</p> Source code in <code>src\\leaguewizard\\mobalytics\\parsers.py</code> <pre><code>class BaseParser(ABC):\n    \"\"\"An abstract base class for parsers.\"\"\"\n\n    def __init__(self, html: HTMLParser) -&gt; None:\n        \"\"\"Initializes the BaseParser.\n\n        Args:\n            html (HTMLParser): The HTML content to parse.\n        \"\"\"\n        self.html = html\n        self._payload: Any = None\n\n    @abstractmethod\n    def parse(self, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Parses the HTML content.\"\"\"\n        ...\n\n    @property\n    def payload(self) -&gt; Any:\n        \"\"\"Returns the parsed payload.\n\n        Returns:\n            Any: The parsed payload.\n        \"\"\"\n        return self._payload\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/parsers/#leaguewizard.mobalytics.parsers.BaseParser.payload","title":"<code>payload</code>  <code>property</code>","text":"<p>Returns the parsed payload.</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The parsed payload.</p>"},{"location":"reference/leaguewizard/mobalytics/parsers/#leaguewizard.mobalytics.parsers.BaseParser.__init__","title":"<code>__init__(html)</code>","text":"<p>Initializes the BaseParser.</p> <p>Parameters:</p> Name Type Description Default <code>html</code> <code>HTMLParser</code> <p>The HTML content to parse.</p> required Source code in <code>src\\leaguewizard\\mobalytics\\parsers.py</code> <pre><code>def __init__(self, html: HTMLParser) -&gt; None:\n    \"\"\"Initializes the BaseParser.\n\n    Args:\n        html (HTMLParser): The HTML content to parse.\n    \"\"\"\n    self.html = html\n    self._payload: Any = None\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/parsers/#leaguewizard.mobalytics.parsers.BaseParser.parse","title":"<code>parse(*args, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>Parses the HTML content.</p> Source code in <code>src\\leaguewizard\\mobalytics\\parsers.py</code> <pre><code>@abstractmethod\ndef parse(self, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Parses the HTML content.\"\"\"\n    ...\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/parsers/#leaguewizard.mobalytics.parsers.ItemsetsParser","title":"<code>ItemsetsParser</code>","text":"<p>               Bases: <code>BaseParser</code></p> <p>A parser for champion item sets.</p> Source code in <code>src\\leaguewizard\\mobalytics\\parsers.py</code> <pre><code>class ItemsetsParser(BaseParser):\n    \"\"\"A parser for champion item sets.\"\"\"\n\n    def parse(\n        self,\n        account_id: int,\n        champion_id: int,\n        champion_name: str,\n        role: str,\n    ) -&gt; None:\n        \"\"\"Parses the item sets from the HTML for a specific champion and role.\n\n        Args:\n            account_id (int): The account ID.\n            champion_id (int): The champion ID.\n            champion_name (str): The champion name.\n            role (str): The role or game mode (e.g., 'aram').\n        \"\"\"\n        item_sets = (\n            self._get_aram_item_sets() if role == \"aram\" else self._get_sr_item_sets()\n        )\n        self._payload = self._get_item_sets_payload(\n            item_sets,\n            account_id,\n            champion_id,\n            champion_name,\n            role,\n        )\n\n    def _get_sr_item_sets(self) -&gt; dict[str, Any]:\n        \"\"\"Extracts Summoner's Rift item sets from the HTML.\"\"\"\n        container_div = self.html.css_first(\"div.m-owe8v3:nth-child(2)\")\n\n        if container_div is None:\n            raise ValueError\n\n        tree = container_div.css(\".m-1q4a7cx\") + self.html.css(\".m-s76v8c\")\n        itemsets = self._get_itemsets(tree)\n        return {\n            \"Starter Items\": itemsets[0],\n            \"Early Items\": itemsets[1],\n            \"Core Items\": itemsets[2],\n            \"Full Build\": itemsets[3],\n            \"Situational Items\": itemsets[4],\n        }\n\n    def _get_aram_item_sets(self) -&gt; dict[str, Any]:\n        \"\"\"Extracts ARAM item sets from the HTML.\"\"\"\n        container_div = self.html.css_first(\"div.m-owe8v3:nth-child(2)\")\n\n        if container_div is None:\n            raise ValueError\n\n        tree = container_div.css(\".m-1q4a7cx\") + self.html.css(\".m-s76v8c\")\n        itemsets = self._get_itemsets(tree)\n        return {\n            \"Starter Items\": itemsets[0],\n            \"Core Items\": itemsets[1],\n            \"Full Build\": itemsets[2],\n            \"Situational Items\": itemsets[3],\n        }\n\n    @staticmethod\n    def _get_itemsets(tree: list[Node]) -&gt; list[list[Any]]:\n        \"\"\"Extracts item sets from a list of HTML nodes.\n\n        This method processes a list of HTML nodes, extracting item IDs from  image sources\n        found within each node. It iterates through each node,  retrieves the image elements,\n        and uses a regular expression to match  and extract the item IDs from the image source\n        URLs. The resulting  item IDs are collected into groups and returned as a list of lists.\n\n        Args:\n            tree (list[Node]): A list of HTML nodes containing item images.\n        \"\"\"\n        item_sets_groups = []\n\n        for node in tree:\n            items = []\n\n            for img in node.css(\"img\"):\n                src = img.attributes.get(\"src\")\n                matches = re.search(r\"/(\\d+)\\.png\", src) if src else None\n\n                if matches:\n                    items.append(matches.group(1))\n\n            item_sets_groups.append(items)\n        return item_sets_groups\n\n    @staticmethod\n    def _get_item_sets_payload(\n        item_sets: dict,\n        account_id: int,\n        champion_id: int,\n        champion_name: str,\n        role: str,\n    ) -&gt; Any:\n        \"\"\"Creates the payload for the item sets.\"\"\"\n        blocks = []\n        for block, items in item_sets.items():\n            item_list = [Item(count=1, id=item) for item in items]\n            blocks.append(Block(items=item_list, type=block))\n        itemset = ItemSet(\n            associatedChampions=[champion_id],\n            blocks=blocks,\n            title=f\"{champion_name.capitalize()} - {role.upper()}\",\n        )\n        return PayloadItemSets(accountId=account_id, itemSets=[itemset], timestamp=0)\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/parsers/#leaguewizard.mobalytics.parsers.ItemsetsParser.parse","title":"<code>parse(account_id, champion_id, champion_name, role)</code>","text":"<p>Parses the item sets from the HTML for a specific champion and role.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>The account ID.</p> required <code>champion_id</code> <code>int</code> <p>The champion ID.</p> required <code>champion_name</code> <code>str</code> <p>The champion name.</p> required <code>role</code> <code>str</code> <p>The role or game mode (e.g., 'aram').</p> required Source code in <code>src\\leaguewizard\\mobalytics\\parsers.py</code> <pre><code>def parse(\n    self,\n    account_id: int,\n    champion_id: int,\n    champion_name: str,\n    role: str,\n) -&gt; None:\n    \"\"\"Parses the item sets from the HTML for a specific champion and role.\n\n    Args:\n        account_id (int): The account ID.\n        champion_id (int): The champion ID.\n        champion_name (str): The champion name.\n        role (str): The role or game mode (e.g., 'aram').\n    \"\"\"\n    item_sets = (\n        self._get_aram_item_sets() if role == \"aram\" else self._get_sr_item_sets()\n    )\n    self._payload = self._get_item_sets_payload(\n        item_sets,\n        account_id,\n        champion_id,\n        champion_name,\n        role,\n    )\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/parsers/#leaguewizard.mobalytics.parsers.PerksParser","title":"<code>PerksParser</code>","text":"<p>               Bases: <code>BaseParser</code></p> <p>A parser for champion rune (perks) pages.</p> Source code in <code>src\\leaguewizard\\mobalytics\\parsers.py</code> <pre><code>class PerksParser(BaseParser):\n    \"\"\"A parser for champion rune (perks) pages.\"\"\"\n\n    def parse(self, champion_name: str, role: str) -&gt; None:\n        \"\"\"Parses the perks from the HTML and creates a PayloadPerks object.\n\n        Args:\n            champion_name (str): The name of the champion.\n            role (str): The role of the champion (e.g., \"top\", \"aram\").\n        \"\"\"\n        perks = self._get_perks()\n        self._payload = PayloadPerks(\n            current=True,\n            name=f\"{champion_name.capitalize()} - {role.upper()}\",\n            primaryStyleId=perks[0],\n            subStyleId=perks[1],\n            selectedPerkIds=perks[2:],\n        )\n\n    def _get_perks(self) -&gt; Any:\n        \"\"\"Retrieve a list of perks from the HTML content.\n\n        This function searches for specific image sources in the HTML using predefined CSS\n        selectors. It extracts the numeric values from the image filenames, which represent the\n        perks. If no valid perks are found, a ValueError is raised. The function relies on the\n        `self.html.css` method to access the HTML nodes and uses regular expressions to parse\n        the image source strings.\n\n        Raises:\n            ValueError: If no perks are found in the HTML content.\n        \"\"\"\n        perks_selectors = [\".m-68x97p\", \".m-1iebrlh\", \".m-1nx2cdb\", \".m-1u3ui07\"]\n        srcs = [\n            node.attributes.get(\"src\")\n            for selector in perks_selectors\n            for node in self.html.css(selector)\n        ]\n        matches = [\n            re.search(r\"/(\\d+)\\.(svg|png)\\b\", src) for src in srcs if src is not None\n        ]\n        if matches:\n            perks = [int(match.group(1)) for match in matches if match is not None]\n        if len(perks) == 0:\n            raise ValueError\n        return perks\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/parsers/#leaguewizard.mobalytics.parsers.PerksParser.parse","title":"<code>parse(champion_name, role)</code>","text":"<p>Parses the perks from the HTML and creates a PayloadPerks object.</p> <p>Parameters:</p> Name Type Description Default <code>champion_name</code> <code>str</code> <p>The name of the champion.</p> required <code>role</code> <code>str</code> <p>The role of the champion (e.g., \"top\", \"aram\").</p> required Source code in <code>src\\leaguewizard\\mobalytics\\parsers.py</code> <pre><code>def parse(self, champion_name: str, role: str) -&gt; None:\n    \"\"\"Parses the perks from the HTML and creates a PayloadPerks object.\n\n    Args:\n        champion_name (str): The name of the champion.\n        role (str): The role of the champion (e.g., \"top\", \"aram\").\n    \"\"\"\n    perks = self._get_perks()\n    self._payload = PayloadPerks(\n        current=True,\n        name=f\"{champion_name.capitalize()} - {role.upper()}\",\n        primaryStyleId=perks[0],\n        subStyleId=perks[1],\n        selectedPerkIds=perks[2:],\n    )\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/parsers/#leaguewizard.mobalytics.parsers.SpellsParser","title":"<code>SpellsParser</code>","text":"<p>               Bases: <code>BaseParser</code></p> <p>A parser for champion summoner spells.</p> Source code in <code>src\\leaguewizard\\mobalytics\\parsers.py</code> <pre><code>class SpellsParser(BaseParser):\n    \"\"\"A parser for champion summoner spells.\"\"\"\n\n    def parse(self) -&gt; None:\n        \"\"\"Parses summoner spells and creates a PayloadSpells object.\"\"\"\n        spells = self._get_spells()\n        flash_config = config.flash\n        flash_pos = 0 if flash_config == \"d\" else 1\n        spells = self._set_flash_position(spells, 4, flash_pos)\n        self._payload = PayloadSpells(\n            spell1Id=spells[0],\n            spell2Id=spells[1],\n            selectedSkinId=0,\n        )\n\n    def _get_spells(self) -&gt; list[int]:\n        \"\"\"Retrieve a list of spell integers from HTML nodes.\"\"\"\n        spells = []\n\n        nodes = self.html.css(\".m-d3vnz1\")\n        for node in nodes:\n            alt = node.attributes.get(\"alt\")\n            if not alt:\n                raise ValueError\n            spell = SPELLS[alt]\n            spells.append(int(spell))\n        if not spells:\n            raise ValueError\n        return spells\n\n    @staticmethod\n    def _set_flash_position(\n        spell_list: list[int],\n        spell_id: int = 4,\n        index: int = 1,\n    ) -&gt; list[int]:\n        \"\"\"Sets the position of a spell ID in the spell list.\"\"\"\n        if spell_id not in spell_list:\n            return spell_list\n\n        spell_list = [x for x in spell_list if x != spell_id]\n        spell_list.insert(index, spell_id)\n        return spell_list\n</code></pre>"},{"location":"reference/leaguewizard/mobalytics/parsers/#leaguewizard.mobalytics.parsers.SpellsParser.parse","title":"<code>parse()</code>","text":"<p>Parses summoner spells and creates a PayloadSpells object.</p> Source code in <code>src\\leaguewizard\\mobalytics\\parsers.py</code> <pre><code>def parse(self) -&gt; None:\n    \"\"\"Parses summoner spells and creates a PayloadSpells object.\"\"\"\n    spells = self._get_spells()\n    flash_config = config.flash\n    flash_pos = 0 if flash_config == \"d\" else 1\n    spells = self._set_flash_position(spells, 4, flash_pos)\n    self._payload = PayloadSpells(\n        spell1Id=spells[0],\n        spell2Id=spells[1],\n        selectedSkinId=0,\n    )\n</code></pre>"}]}